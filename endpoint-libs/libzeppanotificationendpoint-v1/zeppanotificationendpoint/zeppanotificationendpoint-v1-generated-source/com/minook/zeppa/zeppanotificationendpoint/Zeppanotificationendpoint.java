/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-07-22 21:53:01 UTC)
 * on 2014-08-13 at 19:43:45 UTC 
 * Modify at your own risk.
 */

package com.minook.zeppa.zeppanotificationendpoint;

/**
 * Service definition for Zeppanotificationendpoint (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ZeppanotificationendpointRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Zeppanotificationendpoint extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.18.0-rc of the zeppanotificationendpoint library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://zeppa-cloud-1821.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "zeppanotificationendpoint/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Zeppanotificationendpoint(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Zeppanotificationendpoint(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "getNotificationList".
   *
   * This request holds the parameters needed by the zeppanotificationendpoint server.  After setting
   * any optional parameters, call the {@link GetNotificationList#execute()} method to invoke the
   * remote operation.
   *
   * @param userId
   * @param start
   * @return the request
   */
  public GetNotificationList getNotificationList(java.lang.Long userId, java.lang.Integer start) throws java.io.IOException {
    GetNotificationList result = new GetNotificationList(userId, start);
    initialize(result);
    return result;
  }

  public class GetNotificationList extends ZeppanotificationendpointRequest<com.minook.zeppa.zeppanotificationendpoint.model.CollectionResponseZeppaNotification> {

    private static final String REST_PATH = "collectionresponse_zeppanotification/{userId}/{start}";

    /**
     * Create a request for the method "getNotificationList".
     *
     * This request holds the parameters needed by the the zeppanotificationendpoint server.  After
     * setting any optional parameters, call the {@link GetNotificationList#execute()} method to
     * invoke the remote operation. <p> {@link GetNotificationList#initialize(com.google.api.client.go
     * ogleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param userId
     * @param start
     * @since 1.13
     */
    protected GetNotificationList(java.lang.Long userId, java.lang.Integer start) {
      super(Zeppanotificationendpoint.this, "GET", REST_PATH, null, com.minook.zeppa.zeppanotificationendpoint.model.CollectionResponseZeppaNotification.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.start = com.google.api.client.util.Preconditions.checkNotNull(start, "Required parameter start must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetNotificationList setAlt(java.lang.String alt) {
      return (GetNotificationList) super.setAlt(alt);
    }

    @Override
    public GetNotificationList setFields(java.lang.String fields) {
      return (GetNotificationList) super.setFields(fields);
    }

    @Override
    public GetNotificationList setKey(java.lang.String key) {
      return (GetNotificationList) super.setKey(key);
    }

    @Override
    public GetNotificationList setOauthToken(java.lang.String oauthToken) {
      return (GetNotificationList) super.setOauthToken(oauthToken);
    }

    @Override
    public GetNotificationList setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetNotificationList) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetNotificationList setQuotaUser(java.lang.String quotaUser) {
      return (GetNotificationList) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetNotificationList setUserIp(java.lang.String userIp) {
      return (GetNotificationList) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetNotificationList setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer start;

    /**

     */
    public java.lang.Integer getStart() {
      return start;
    }

    public GetNotificationList setStart(java.lang.Integer start) {
      this.start = start;
      return this;
    }

    @Override
    public GetNotificationList set(String parameterName, Object value) {
      return (GetNotificationList) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUnseenNotifications".
   *
   * This request holds the parameters needed by the zeppanotificationendpoint server.  After setting
   * any optional parameters, call the {@link GetUnseenNotifications#execute()} method to invoke the
   * remote operation.
   *
   * @param userId
   * @return the request
   */
  public GetUnseenNotifications getUnseenNotifications(java.lang.Long userId) throws java.io.IOException {
    GetUnseenNotifications result = new GetUnseenNotifications(userId);
    initialize(result);
    return result;
  }

  public class GetUnseenNotifications extends ZeppanotificationendpointRequest<com.minook.zeppa.zeppanotificationendpoint.model.CollectionResponseZeppaNotification> {

    private static final String REST_PATH = "collectionresponse_zeppanotification/{userId}";

    /**
     * Create a request for the method "getUnseenNotifications".
     *
     * This request holds the parameters needed by the the zeppanotificationendpoint server.  After
     * setting any optional parameters, call the {@link GetUnseenNotifications#execute()} method to
     * invoke the remote operation. <p> {@link GetUnseenNotifications#initialize(com.google.api.client
     * .googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param userId
     * @since 1.13
     */
    protected GetUnseenNotifications(java.lang.Long userId) {
      super(Zeppanotificationendpoint.this, "GET", REST_PATH, null, com.minook.zeppa.zeppanotificationendpoint.model.CollectionResponseZeppaNotification.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUnseenNotifications setAlt(java.lang.String alt) {
      return (GetUnseenNotifications) super.setAlt(alt);
    }

    @Override
    public GetUnseenNotifications setFields(java.lang.String fields) {
      return (GetUnseenNotifications) super.setFields(fields);
    }

    @Override
    public GetUnseenNotifications setKey(java.lang.String key) {
      return (GetUnseenNotifications) super.setKey(key);
    }

    @Override
    public GetUnseenNotifications setOauthToken(java.lang.String oauthToken) {
      return (GetUnseenNotifications) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUnseenNotifications setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUnseenNotifications) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUnseenNotifications setQuotaUser(java.lang.String quotaUser) {
      return (GetUnseenNotifications) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUnseenNotifications setUserIp(java.lang.String userIp) {
      return (GetUnseenNotifications) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetUnseenNotifications setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public GetUnseenNotifications set(String parameterName, Object value) {
      return (GetUnseenNotifications) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getZeppaNotification".
   *
   * This request holds the parameters needed by the zeppanotificationendpoint server.  After setting
   * any optional parameters, call the {@link GetZeppaNotification#execute()} method to invoke the
   * remote operation.
   *
   * @param id
   * @return the request
   */
  public GetZeppaNotification getZeppaNotification(java.lang.Long id) throws java.io.IOException {
    GetZeppaNotification result = new GetZeppaNotification(id);
    initialize(result);
    return result;
  }

  public class GetZeppaNotification extends ZeppanotificationendpointRequest<com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification> {

    private static final String REST_PATH = "zeppanotification/{id}";

    /**
     * Create a request for the method "getZeppaNotification".
     *
     * This request holds the parameters needed by the the zeppanotificationendpoint server.  After
     * setting any optional parameters, call the {@link GetZeppaNotification#execute()} method to
     * invoke the remote operation. <p> {@link GetZeppaNotification#initialize(com.google.api.client.g
     * oogleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetZeppaNotification(java.lang.Long id) {
      super(Zeppanotificationendpoint.this, "GET", REST_PATH, null, com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetZeppaNotification setAlt(java.lang.String alt) {
      return (GetZeppaNotification) super.setAlt(alt);
    }

    @Override
    public GetZeppaNotification setFields(java.lang.String fields) {
      return (GetZeppaNotification) super.setFields(fields);
    }

    @Override
    public GetZeppaNotification setKey(java.lang.String key) {
      return (GetZeppaNotification) super.setKey(key);
    }

    @Override
    public GetZeppaNotification setOauthToken(java.lang.String oauthToken) {
      return (GetZeppaNotification) super.setOauthToken(oauthToken);
    }

    @Override
    public GetZeppaNotification setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetZeppaNotification) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetZeppaNotification setQuotaUser(java.lang.String quotaUser) {
      return (GetZeppaNotification) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetZeppaNotification setUserIp(java.lang.String userIp) {
      return (GetZeppaNotification) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetZeppaNotification setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetZeppaNotification set(String parameterName, Object value) {
      return (GetZeppaNotification) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertZeppaNotification".
   *
   * This request holds the parameters needed by the zeppanotificationendpoint server.  After setting
   * any optional parameters, call the {@link InsertZeppaNotification#execute()} method to invoke the
   * remote operation.
   *
   * @param content the {@link com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification}
   * @return the request
   */
  public InsertZeppaNotification insertZeppaNotification(com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification content) throws java.io.IOException {
    InsertZeppaNotification result = new InsertZeppaNotification(content);
    initialize(result);
    return result;
  }

  public class InsertZeppaNotification extends ZeppanotificationendpointRequest<com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification> {

    private static final String REST_PATH = "zeppanotification";

    /**
     * Create a request for the method "insertZeppaNotification".
     *
     * This request holds the parameters needed by the the zeppanotificationendpoint server.  After
     * setting any optional parameters, call the {@link InsertZeppaNotification#execute()} method to
     * invoke the remote operation. <p> {@link InsertZeppaNotification#initialize(com.google.api.clien
     * t.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification}
     * @since 1.13
     */
    protected InsertZeppaNotification(com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification content) {
      super(Zeppanotificationendpoint.this, "POST", REST_PATH, content, com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification.class);
    }

    @Override
    public InsertZeppaNotification setAlt(java.lang.String alt) {
      return (InsertZeppaNotification) super.setAlt(alt);
    }

    @Override
    public InsertZeppaNotification setFields(java.lang.String fields) {
      return (InsertZeppaNotification) super.setFields(fields);
    }

    @Override
    public InsertZeppaNotification setKey(java.lang.String key) {
      return (InsertZeppaNotification) super.setKey(key);
    }

    @Override
    public InsertZeppaNotification setOauthToken(java.lang.String oauthToken) {
      return (InsertZeppaNotification) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertZeppaNotification setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertZeppaNotification) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertZeppaNotification setQuotaUser(java.lang.String quotaUser) {
      return (InsertZeppaNotification) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertZeppaNotification setUserIp(java.lang.String userIp) {
      return (InsertZeppaNotification) super.setUserIp(userIp);
    }

    @Override
    public InsertZeppaNotification set(String parameterName, Object value) {
      return (InsertZeppaNotification) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listZeppaNotification".
   *
   * This request holds the parameters needed by the zeppanotificationendpoint server.  After setting
   * any optional parameters, call the {@link ListZeppaNotification#execute()} method to invoke the
   * remote operation.
   *
   * @return the request
   */
  public ListZeppaNotification listZeppaNotification() throws java.io.IOException {
    ListZeppaNotification result = new ListZeppaNotification();
    initialize(result);
    return result;
  }

  public class ListZeppaNotification extends ZeppanotificationendpointRequest<com.minook.zeppa.zeppanotificationendpoint.model.CollectionResponseZeppaNotification> {

    private static final String REST_PATH = "zeppanotification";

    /**
     * Create a request for the method "listZeppaNotification".
     *
     * This request holds the parameters needed by the the zeppanotificationendpoint server.  After
     * setting any optional parameters, call the {@link ListZeppaNotification#execute()} method to
     * invoke the remote operation. <p> {@link ListZeppaNotification#initialize(com.google.api.client.
     * googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListZeppaNotification() {
      super(Zeppanotificationendpoint.this, "GET", REST_PATH, null, com.minook.zeppa.zeppanotificationendpoint.model.CollectionResponseZeppaNotification.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListZeppaNotification setAlt(java.lang.String alt) {
      return (ListZeppaNotification) super.setAlt(alt);
    }

    @Override
    public ListZeppaNotification setFields(java.lang.String fields) {
      return (ListZeppaNotification) super.setFields(fields);
    }

    @Override
    public ListZeppaNotification setKey(java.lang.String key) {
      return (ListZeppaNotification) super.setKey(key);
    }

    @Override
    public ListZeppaNotification setOauthToken(java.lang.String oauthToken) {
      return (ListZeppaNotification) super.setOauthToken(oauthToken);
    }

    @Override
    public ListZeppaNotification setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListZeppaNotification) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListZeppaNotification setQuotaUser(java.lang.String quotaUser) {
      return (ListZeppaNotification) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListZeppaNotification setUserIp(java.lang.String userIp) {
      return (ListZeppaNotification) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListZeppaNotification setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListZeppaNotification setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListZeppaNotification set(String parameterName, Object value) {
      return (ListZeppaNotification) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeZeppaNotification".
   *
   * This request holds the parameters needed by the zeppanotificationendpoint server.  After setting
   * any optional parameters, call the {@link RemoveZeppaNotification#execute()} method to invoke the
   * remote operation.
   *
   * @param id
   * @return the request
   */
  public RemoveZeppaNotification removeZeppaNotification(java.lang.Long id) throws java.io.IOException {
    RemoveZeppaNotification result = new RemoveZeppaNotification(id);
    initialize(result);
    return result;
  }

  public class RemoveZeppaNotification extends ZeppanotificationendpointRequest<Void> {

    private static final String REST_PATH = "zeppanotification/{id}";

    /**
     * Create a request for the method "removeZeppaNotification".
     *
     * This request holds the parameters needed by the the zeppanotificationendpoint server.  After
     * setting any optional parameters, call the {@link RemoveZeppaNotification#execute()} method to
     * invoke the remote operation. <p> {@link RemoveZeppaNotification#initialize(com.google.api.clien
     * t.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveZeppaNotification(java.lang.Long id) {
      super(Zeppanotificationendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveZeppaNotification setAlt(java.lang.String alt) {
      return (RemoveZeppaNotification) super.setAlt(alt);
    }

    @Override
    public RemoveZeppaNotification setFields(java.lang.String fields) {
      return (RemoveZeppaNotification) super.setFields(fields);
    }

    @Override
    public RemoveZeppaNotification setKey(java.lang.String key) {
      return (RemoveZeppaNotification) super.setKey(key);
    }

    @Override
    public RemoveZeppaNotification setOauthToken(java.lang.String oauthToken) {
      return (RemoveZeppaNotification) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveZeppaNotification setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveZeppaNotification) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveZeppaNotification setQuotaUser(java.lang.String quotaUser) {
      return (RemoveZeppaNotification) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveZeppaNotification setUserIp(java.lang.String userIp) {
      return (RemoveZeppaNotification) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveZeppaNotification setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveZeppaNotification set(String parameterName, Object value) {
      return (RemoveZeppaNotification) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateZeppaNotification".
   *
   * This request holds the parameters needed by the zeppanotificationendpoint server.  After setting
   * any optional parameters, call the {@link UpdateZeppaNotification#execute()} method to invoke the
   * remote operation.
   *
   * @param content the {@link com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification}
   * @return the request
   */
  public UpdateZeppaNotification updateZeppaNotification(com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification content) throws java.io.IOException {
    UpdateZeppaNotification result = new UpdateZeppaNotification(content);
    initialize(result);
    return result;
  }

  public class UpdateZeppaNotification extends ZeppanotificationendpointRequest<com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification> {

    private static final String REST_PATH = "zeppanotification";

    /**
     * Create a request for the method "updateZeppaNotification".
     *
     * This request holds the parameters needed by the the zeppanotificationendpoint server.  After
     * setting any optional parameters, call the {@link UpdateZeppaNotification#execute()} method to
     * invoke the remote operation. <p> {@link UpdateZeppaNotification#initialize(com.google.api.clien
     * t.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification}
     * @since 1.13
     */
    protected UpdateZeppaNotification(com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification content) {
      super(Zeppanotificationendpoint.this, "PUT", REST_PATH, content, com.minook.zeppa.zeppanotificationendpoint.model.ZeppaNotification.class);
    }

    @Override
    public UpdateZeppaNotification setAlt(java.lang.String alt) {
      return (UpdateZeppaNotification) super.setAlt(alt);
    }

    @Override
    public UpdateZeppaNotification setFields(java.lang.String fields) {
      return (UpdateZeppaNotification) super.setFields(fields);
    }

    @Override
    public UpdateZeppaNotification setKey(java.lang.String key) {
      return (UpdateZeppaNotification) super.setKey(key);
    }

    @Override
    public UpdateZeppaNotification setOauthToken(java.lang.String oauthToken) {
      return (UpdateZeppaNotification) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateZeppaNotification setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateZeppaNotification) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateZeppaNotification setQuotaUser(java.lang.String quotaUser) {
      return (UpdateZeppaNotification) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateZeppaNotification setUserIp(java.lang.String userIp) {
      return (UpdateZeppaNotification) super.setUserIp(userIp);
    }

    @Override
    public UpdateZeppaNotification set(String parameterName, Object value) {
      return (UpdateZeppaNotification) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "userHasSeen".
   *
   * This request holds the parameters needed by the zeppanotificationendpoint server.  After setting
   * any optional parameters, call the {@link UserHasSeen#execute()} method to invoke the remote
   * operation.
   *
   * @param notificationId
   * @return the request
   */
  public UserHasSeen userHasSeen(java.lang.Long notificationId) throws java.io.IOException {
    UserHasSeen result = new UserHasSeen(notificationId);
    initialize(result);
    return result;
  }

  public class UserHasSeen extends ZeppanotificationendpointRequest<Void> {

    private static final String REST_PATH = "userHasSeen/{notificationId}";

    /**
     * Create a request for the method "userHasSeen".
     *
     * This request holds the parameters needed by the the zeppanotificationendpoint server.  After
     * setting any optional parameters, call the {@link UserHasSeen#execute()} method to invoke the
     * remote operation. <p> {@link
     * UserHasSeen#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param notificationId
     * @since 1.13
     */
    protected UserHasSeen(java.lang.Long notificationId) {
      super(Zeppanotificationendpoint.this, "POST", REST_PATH, null, Void.class);
      this.notificationId = com.google.api.client.util.Preconditions.checkNotNull(notificationId, "Required parameter notificationId must be specified.");
    }

    @Override
    public UserHasSeen setAlt(java.lang.String alt) {
      return (UserHasSeen) super.setAlt(alt);
    }

    @Override
    public UserHasSeen setFields(java.lang.String fields) {
      return (UserHasSeen) super.setFields(fields);
    }

    @Override
    public UserHasSeen setKey(java.lang.String key) {
      return (UserHasSeen) super.setKey(key);
    }

    @Override
    public UserHasSeen setOauthToken(java.lang.String oauthToken) {
      return (UserHasSeen) super.setOauthToken(oauthToken);
    }

    @Override
    public UserHasSeen setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UserHasSeen) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UserHasSeen setQuotaUser(java.lang.String quotaUser) {
      return (UserHasSeen) super.setQuotaUser(quotaUser);
    }

    @Override
    public UserHasSeen setUserIp(java.lang.String userIp) {
      return (UserHasSeen) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long notificationId;

    /**

     */
    public java.lang.Long getNotificationId() {
      return notificationId;
    }

    public UserHasSeen setNotificationId(java.lang.Long notificationId) {
      this.notificationId = notificationId;
      return this;
    }

    @Override
    public UserHasSeen set(String parameterName, Object value) {
      return (UserHasSeen) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Zeppanotificationendpoint}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Zeppanotificationendpoint}. */
    @Override
    public Zeppanotificationendpoint build() {
      return new Zeppanotificationendpoint(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ZeppanotificationendpointRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setZeppanotificationendpointRequestInitializer(
        ZeppanotificationendpointRequestInitializer zeppanotificationendpointRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(zeppanotificationendpointRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
