/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-07-22 21:53:01 UTC)
 * on 2014-08-13 at 19:43:54 UTC 
 * Modify at your own risk.
 */

package com.minook.zeppa.zeppauserinfoendpoint;

/**
 * Service definition for Zeppauserinfoendpoint (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ZeppauserinfoendpointRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Zeppauserinfoendpoint extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.18.0-rc of the zeppauserinfoendpoint library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://zeppa-cloud-1821.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "zeppauserinfoendpoint/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Zeppauserinfoendpoint(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Zeppauserinfoendpoint(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "fetchFriendByEmail".
   *
   * This request holds the parameters needed by the zeppauserinfoendpoint server.  After setting any
   * optional parameters, call the {@link FetchFriendByEmail#execute()} method to invoke the remote
   * operation.
   *
   * @param emailString
   * @return the request
   */
  public FetchFriendByEmail fetchFriendByEmail(java.lang.String emailString) throws java.io.IOException {
    FetchFriendByEmail result = new FetchFriendByEmail(emailString);
    initialize(result);
    return result;
  }

  public class FetchFriendByEmail extends ZeppauserinfoendpointRequest<com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo> {

    private static final String REST_PATH = "fetchFriendByEmail/{emailString}";

    /**
     * Create a request for the method "fetchFriendByEmail".
     *
     * This request holds the parameters needed by the the zeppauserinfoendpoint server.  After
     * setting any optional parameters, call the {@link FetchFriendByEmail#execute()} method to invoke
     * the remote operation. <p> {@link FetchFriendByEmail#initialize(com.google.api.client.googleapis
     * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param emailString
     * @since 1.13
     */
    protected FetchFriendByEmail(java.lang.String emailString) {
      super(Zeppauserinfoendpoint.this, "POST", REST_PATH, null, com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo.class);
      this.emailString = com.google.api.client.util.Preconditions.checkNotNull(emailString, "Required parameter emailString must be specified.");
    }

    @Override
    public FetchFriendByEmail setAlt(java.lang.String alt) {
      return (FetchFriendByEmail) super.setAlt(alt);
    }

    @Override
    public FetchFriendByEmail setFields(java.lang.String fields) {
      return (FetchFriendByEmail) super.setFields(fields);
    }

    @Override
    public FetchFriendByEmail setKey(java.lang.String key) {
      return (FetchFriendByEmail) super.setKey(key);
    }

    @Override
    public FetchFriendByEmail setOauthToken(java.lang.String oauthToken) {
      return (FetchFriendByEmail) super.setOauthToken(oauthToken);
    }

    @Override
    public FetchFriendByEmail setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FetchFriendByEmail) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FetchFriendByEmail setQuotaUser(java.lang.String quotaUser) {
      return (FetchFriendByEmail) super.setQuotaUser(quotaUser);
    }

    @Override
    public FetchFriendByEmail setUserIp(java.lang.String userIp) {
      return (FetchFriendByEmail) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String emailString;

    /**

     */
    public java.lang.String getEmailString() {
      return emailString;
    }

    public FetchFriendByEmail setEmailString(java.lang.String emailString) {
      this.emailString = emailString;
      return this;
    }

    @Override
    public FetchFriendByEmail set(String parameterName, Object value) {
      return (FetchFriendByEmail) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "fetchZeppaUserInfoById".
   *
   * This request holds the parameters needed by the zeppauserinfoendpoint server.  After setting any
   * optional parameters, call the {@link FetchZeppaUserInfoById#execute()} method to invoke the
   * remote operation.
   *
   * @param requestedUserId
   * @return the request
   */
  public FetchZeppaUserInfoById fetchZeppaUserInfoById(java.lang.Long requestedUserId) throws java.io.IOException {
    FetchZeppaUserInfoById result = new FetchZeppaUserInfoById(requestedUserId);
    initialize(result);
    return result;
  }

  public class FetchZeppaUserInfoById extends ZeppauserinfoendpointRequest<com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo> {

    private static final String REST_PATH = "fetchZeppaUserInfoById/{requestedUserId}";

    /**
     * Create a request for the method "fetchZeppaUserInfoById".
     *
     * This request holds the parameters needed by the the zeppauserinfoendpoint server.  After
     * setting any optional parameters, call the {@link FetchZeppaUserInfoById#execute()} method to
     * invoke the remote operation. <p> {@link FetchZeppaUserInfoById#initialize(com.google.api.client
     * .googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param requestedUserId
     * @since 1.13
     */
    protected FetchZeppaUserInfoById(java.lang.Long requestedUserId) {
      super(Zeppauserinfoendpoint.this, "POST", REST_PATH, null, com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo.class);
      this.requestedUserId = com.google.api.client.util.Preconditions.checkNotNull(requestedUserId, "Required parameter requestedUserId must be specified.");
    }

    @Override
    public FetchZeppaUserInfoById setAlt(java.lang.String alt) {
      return (FetchZeppaUserInfoById) super.setAlt(alt);
    }

    @Override
    public FetchZeppaUserInfoById setFields(java.lang.String fields) {
      return (FetchZeppaUserInfoById) super.setFields(fields);
    }

    @Override
    public FetchZeppaUserInfoById setKey(java.lang.String key) {
      return (FetchZeppaUserInfoById) super.setKey(key);
    }

    @Override
    public FetchZeppaUserInfoById setOauthToken(java.lang.String oauthToken) {
      return (FetchZeppaUserInfoById) super.setOauthToken(oauthToken);
    }

    @Override
    public FetchZeppaUserInfoById setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FetchZeppaUserInfoById) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FetchZeppaUserInfoById setQuotaUser(java.lang.String quotaUser) {
      return (FetchZeppaUserInfoById) super.setQuotaUser(quotaUser);
    }

    @Override
    public FetchZeppaUserInfoById setUserIp(java.lang.String userIp) {
      return (FetchZeppaUserInfoById) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long requestedUserId;

    /**

     */
    public java.lang.Long getRequestedUserId() {
      return requestedUserId;
    }

    public FetchZeppaUserInfoById setRequestedUserId(java.lang.Long requestedUserId) {
      this.requestedUserId = requestedUserId;
      return this;
    }

    @Override
    public FetchZeppaUserInfoById set(String parameterName, Object value) {
      return (FetchZeppaUserInfoById) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "findFriendsByEmailList".
   *
   * This request holds the parameters needed by the zeppauserinfoendpoint server.  After setting any
   * optional parameters, call the {@link FindFriendsByEmailList#execute()} method to invoke the
   * remote operation.
   *
   * @param encodedStringList
   * @return the request
   */
  public FindFriendsByEmailList findFriendsByEmailList(java.lang.String encodedStringList) throws java.io.IOException {
    FindFriendsByEmailList result = new FindFriendsByEmailList(encodedStringList);
    initialize(result);
    return result;
  }

  public class FindFriendsByEmailList extends ZeppauserinfoendpointRequest<com.minook.zeppa.zeppauserinfoendpoint.model.CollectionResponseZeppaUserInfo> {

    private static final String REST_PATH = "findFriendsByEmailList/{encodedStringList}";

    /**
     * Create a request for the method "findFriendsByEmailList".
     *
     * This request holds the parameters needed by the the zeppauserinfoendpoint server.  After
     * setting any optional parameters, call the {@link FindFriendsByEmailList#execute()} method to
     * invoke the remote operation. <p> {@link FindFriendsByEmailList#initialize(com.google.api.client
     * .googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param encodedStringList
     * @since 1.13
     */
    protected FindFriendsByEmailList(java.lang.String encodedStringList) {
      super(Zeppauserinfoendpoint.this, "POST", REST_PATH, null, com.minook.zeppa.zeppauserinfoendpoint.model.CollectionResponseZeppaUserInfo.class);
      this.encodedStringList = com.google.api.client.util.Preconditions.checkNotNull(encodedStringList, "Required parameter encodedStringList must be specified.");
    }

    @Override
    public FindFriendsByEmailList setAlt(java.lang.String alt) {
      return (FindFriendsByEmailList) super.setAlt(alt);
    }

    @Override
    public FindFriendsByEmailList setFields(java.lang.String fields) {
      return (FindFriendsByEmailList) super.setFields(fields);
    }

    @Override
    public FindFriendsByEmailList setKey(java.lang.String key) {
      return (FindFriendsByEmailList) super.setKey(key);
    }

    @Override
    public FindFriendsByEmailList setOauthToken(java.lang.String oauthToken) {
      return (FindFriendsByEmailList) super.setOauthToken(oauthToken);
    }

    @Override
    public FindFriendsByEmailList setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FindFriendsByEmailList) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FindFriendsByEmailList setQuotaUser(java.lang.String quotaUser) {
      return (FindFriendsByEmailList) super.setQuotaUser(quotaUser);
    }

    @Override
    public FindFriendsByEmailList setUserIp(java.lang.String userIp) {
      return (FindFriendsByEmailList) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String encodedStringList;

    /**

     */
    public java.lang.String getEncodedStringList() {
      return encodedStringList;
    }

    public FindFriendsByEmailList setEncodedStringList(java.lang.String encodedStringList) {
      this.encodedStringList = encodedStringList;
      return this;
    }

    @Override
    public FindFriendsByEmailList set(String parameterName, Object value) {
      return (FindFriendsByEmailList) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "findFriendsByPhoneList".
   *
   * This request holds the parameters needed by the zeppauserinfoendpoint server.  After setting any
   * optional parameters, call the {@link FindFriendsByPhoneList#execute()} method to invoke the
   * remote operation.
   *
   * @param encodedPhoneList
   * @return the request
   */
  public FindFriendsByPhoneList findFriendsByPhoneList(java.lang.String encodedPhoneList) throws java.io.IOException {
    FindFriendsByPhoneList result = new FindFriendsByPhoneList(encodedPhoneList);
    initialize(result);
    return result;
  }

  public class FindFriendsByPhoneList extends ZeppauserinfoendpointRequest<com.minook.zeppa.zeppauserinfoendpoint.model.CollectionResponseZeppaUserInfo> {

    private static final String REST_PATH = "findFriendsByPhoneList/{encodedPhoneList}";

    /**
     * Create a request for the method "findFriendsByPhoneList".
     *
     * This request holds the parameters needed by the the zeppauserinfoendpoint server.  After
     * setting any optional parameters, call the {@link FindFriendsByPhoneList#execute()} method to
     * invoke the remote operation. <p> {@link FindFriendsByPhoneList#initialize(com.google.api.client
     * .googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param encodedPhoneList
     * @since 1.13
     */
    protected FindFriendsByPhoneList(java.lang.String encodedPhoneList) {
      super(Zeppauserinfoendpoint.this, "POST", REST_PATH, null, com.minook.zeppa.zeppauserinfoendpoint.model.CollectionResponseZeppaUserInfo.class);
      this.encodedPhoneList = com.google.api.client.util.Preconditions.checkNotNull(encodedPhoneList, "Required parameter encodedPhoneList must be specified.");
    }

    @Override
    public FindFriendsByPhoneList setAlt(java.lang.String alt) {
      return (FindFriendsByPhoneList) super.setAlt(alt);
    }

    @Override
    public FindFriendsByPhoneList setFields(java.lang.String fields) {
      return (FindFriendsByPhoneList) super.setFields(fields);
    }

    @Override
    public FindFriendsByPhoneList setKey(java.lang.String key) {
      return (FindFriendsByPhoneList) super.setKey(key);
    }

    @Override
    public FindFriendsByPhoneList setOauthToken(java.lang.String oauthToken) {
      return (FindFriendsByPhoneList) super.setOauthToken(oauthToken);
    }

    @Override
    public FindFriendsByPhoneList setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FindFriendsByPhoneList) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FindFriendsByPhoneList setQuotaUser(java.lang.String quotaUser) {
      return (FindFriendsByPhoneList) super.setQuotaUser(quotaUser);
    }

    @Override
    public FindFriendsByPhoneList setUserIp(java.lang.String userIp) {
      return (FindFriendsByPhoneList) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String encodedPhoneList;

    /**

     */
    public java.lang.String getEncodedPhoneList() {
      return encodedPhoneList;
    }

    public FindFriendsByPhoneList setEncodedPhoneList(java.lang.String encodedPhoneList) {
      this.encodedPhoneList = encodedPhoneList;
      return this;
    }

    @Override
    public FindFriendsByPhoneList set(String parameterName, Object value) {
      return (FindFriendsByPhoneList) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getZeppaUserInfo".
   *
   * This request holds the parameters needed by the zeppauserinfoendpoint server.  After setting any
   * optional parameters, call the {@link GetZeppaUserInfo#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public GetZeppaUserInfo getZeppaUserInfo(java.lang.Long id) throws java.io.IOException {
    GetZeppaUserInfo result = new GetZeppaUserInfo(id);
    initialize(result);
    return result;
  }

  public class GetZeppaUserInfo extends ZeppauserinfoendpointRequest<com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo> {

    private static final String REST_PATH = "zeppauserinfo/{id}";

    /**
     * Create a request for the method "getZeppaUserInfo".
     *
     * This request holds the parameters needed by the the zeppauserinfoendpoint server.  After
     * setting any optional parameters, call the {@link GetZeppaUserInfo#execute()} method to invoke
     * the remote operation. <p> {@link GetZeppaUserInfo#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetZeppaUserInfo(java.lang.Long id) {
      super(Zeppauserinfoendpoint.this, "GET", REST_PATH, null, com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetZeppaUserInfo setAlt(java.lang.String alt) {
      return (GetZeppaUserInfo) super.setAlt(alt);
    }

    @Override
    public GetZeppaUserInfo setFields(java.lang.String fields) {
      return (GetZeppaUserInfo) super.setFields(fields);
    }

    @Override
    public GetZeppaUserInfo setKey(java.lang.String key) {
      return (GetZeppaUserInfo) super.setKey(key);
    }

    @Override
    public GetZeppaUserInfo setOauthToken(java.lang.String oauthToken) {
      return (GetZeppaUserInfo) super.setOauthToken(oauthToken);
    }

    @Override
    public GetZeppaUserInfo setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetZeppaUserInfo) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetZeppaUserInfo setQuotaUser(java.lang.String quotaUser) {
      return (GetZeppaUserInfo) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetZeppaUserInfo setUserIp(java.lang.String userIp) {
      return (GetZeppaUserInfo) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetZeppaUserInfo setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetZeppaUserInfo set(String parameterName, Object value) {
      return (GetZeppaUserInfo) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertZeppaUserInfo".
   *
   * This request holds the parameters needed by the zeppauserinfoendpoint server.  After setting any
   * optional parameters, call the {@link InsertZeppaUserInfo#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo}
   * @return the request
   */
  public InsertZeppaUserInfo insertZeppaUserInfo(com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo content) throws java.io.IOException {
    InsertZeppaUserInfo result = new InsertZeppaUserInfo(content);
    initialize(result);
    return result;
  }

  public class InsertZeppaUserInfo extends ZeppauserinfoendpointRequest<com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo> {

    private static final String REST_PATH = "zeppauserinfo";

    /**
     * Create a request for the method "insertZeppaUserInfo".
     *
     * This request holds the parameters needed by the the zeppauserinfoendpoint server.  After
     * setting any optional parameters, call the {@link InsertZeppaUserInfo#execute()} method to
     * invoke the remote operation. <p> {@link InsertZeppaUserInfo#initialize(com.google.api.client.go
     * ogleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo}
     * @since 1.13
     */
    protected InsertZeppaUserInfo(com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo content) {
      super(Zeppauserinfoendpoint.this, "POST", REST_PATH, content, com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo.class);
    }

    @Override
    public InsertZeppaUserInfo setAlt(java.lang.String alt) {
      return (InsertZeppaUserInfo) super.setAlt(alt);
    }

    @Override
    public InsertZeppaUserInfo setFields(java.lang.String fields) {
      return (InsertZeppaUserInfo) super.setFields(fields);
    }

    @Override
    public InsertZeppaUserInfo setKey(java.lang.String key) {
      return (InsertZeppaUserInfo) super.setKey(key);
    }

    @Override
    public InsertZeppaUserInfo setOauthToken(java.lang.String oauthToken) {
      return (InsertZeppaUserInfo) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertZeppaUserInfo setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertZeppaUserInfo) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertZeppaUserInfo setQuotaUser(java.lang.String quotaUser) {
      return (InsertZeppaUserInfo) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertZeppaUserInfo setUserIp(java.lang.String userIp) {
      return (InsertZeppaUserInfo) super.setUserIp(userIp);
    }

    @Override
    public InsertZeppaUserInfo set(String parameterName, Object value) {
      return (InsertZeppaUserInfo) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listZeppaUserInfo".
   *
   * This request holds the parameters needed by the zeppauserinfoendpoint server.  After setting any
   * optional parameters, call the {@link ListZeppaUserInfo#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public ListZeppaUserInfo listZeppaUserInfo() throws java.io.IOException {
    ListZeppaUserInfo result = new ListZeppaUserInfo();
    initialize(result);
    return result;
  }

  public class ListZeppaUserInfo extends ZeppauserinfoendpointRequest<com.minook.zeppa.zeppauserinfoendpoint.model.CollectionResponseZeppaUserInfo> {

    private static final String REST_PATH = "zeppauserinfo";

    /**
     * Create a request for the method "listZeppaUserInfo".
     *
     * This request holds the parameters needed by the the zeppauserinfoendpoint server.  After
     * setting any optional parameters, call the {@link ListZeppaUserInfo#execute()} method to invoke
     * the remote operation. <p> {@link ListZeppaUserInfo#initialize(com.google.api.client.googleapis.
     * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListZeppaUserInfo() {
      super(Zeppauserinfoendpoint.this, "GET", REST_PATH, null, com.minook.zeppa.zeppauserinfoendpoint.model.CollectionResponseZeppaUserInfo.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListZeppaUserInfo setAlt(java.lang.String alt) {
      return (ListZeppaUserInfo) super.setAlt(alt);
    }

    @Override
    public ListZeppaUserInfo setFields(java.lang.String fields) {
      return (ListZeppaUserInfo) super.setFields(fields);
    }

    @Override
    public ListZeppaUserInfo setKey(java.lang.String key) {
      return (ListZeppaUserInfo) super.setKey(key);
    }

    @Override
    public ListZeppaUserInfo setOauthToken(java.lang.String oauthToken) {
      return (ListZeppaUserInfo) super.setOauthToken(oauthToken);
    }

    @Override
    public ListZeppaUserInfo setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListZeppaUserInfo) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListZeppaUserInfo setQuotaUser(java.lang.String quotaUser) {
      return (ListZeppaUserInfo) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListZeppaUserInfo setUserIp(java.lang.String userIp) {
      return (ListZeppaUserInfo) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListZeppaUserInfo setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListZeppaUserInfo setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListZeppaUserInfo set(String parameterName, Object value) {
      return (ListZeppaUserInfo) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeZeppaUserInfo".
   *
   * This request holds the parameters needed by the zeppauserinfoendpoint server.  After setting any
   * optional parameters, call the {@link RemoveZeppaUserInfo#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemoveZeppaUserInfo removeZeppaUserInfo(java.lang.Long id) throws java.io.IOException {
    RemoveZeppaUserInfo result = new RemoveZeppaUserInfo(id);
    initialize(result);
    return result;
  }

  public class RemoveZeppaUserInfo extends ZeppauserinfoendpointRequest<Void> {

    private static final String REST_PATH = "zeppauserinfo/{id}";

    /**
     * Create a request for the method "removeZeppaUserInfo".
     *
     * This request holds the parameters needed by the the zeppauserinfoendpoint server.  After
     * setting any optional parameters, call the {@link RemoveZeppaUserInfo#execute()} method to
     * invoke the remote operation. <p> {@link RemoveZeppaUserInfo#initialize(com.google.api.client.go
     * ogleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveZeppaUserInfo(java.lang.Long id) {
      super(Zeppauserinfoendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveZeppaUserInfo setAlt(java.lang.String alt) {
      return (RemoveZeppaUserInfo) super.setAlt(alt);
    }

    @Override
    public RemoveZeppaUserInfo setFields(java.lang.String fields) {
      return (RemoveZeppaUserInfo) super.setFields(fields);
    }

    @Override
    public RemoveZeppaUserInfo setKey(java.lang.String key) {
      return (RemoveZeppaUserInfo) super.setKey(key);
    }

    @Override
    public RemoveZeppaUserInfo setOauthToken(java.lang.String oauthToken) {
      return (RemoveZeppaUserInfo) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveZeppaUserInfo setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveZeppaUserInfo) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveZeppaUserInfo setQuotaUser(java.lang.String quotaUser) {
      return (RemoveZeppaUserInfo) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveZeppaUserInfo setUserIp(java.lang.String userIp) {
      return (RemoveZeppaUserInfo) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveZeppaUserInfo setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveZeppaUserInfo set(String parameterName, Object value) {
      return (RemoveZeppaUserInfo) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateZeppaUserInfo".
   *
   * This request holds the parameters needed by the zeppauserinfoendpoint server.  After setting any
   * optional parameters, call the {@link UpdateZeppaUserInfo#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo}
   * @return the request
   */
  public UpdateZeppaUserInfo updateZeppaUserInfo(com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo content) throws java.io.IOException {
    UpdateZeppaUserInfo result = new UpdateZeppaUserInfo(content);
    initialize(result);
    return result;
  }

  public class UpdateZeppaUserInfo extends ZeppauserinfoendpointRequest<com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo> {

    private static final String REST_PATH = "zeppauserinfo";

    /**
     * Create a request for the method "updateZeppaUserInfo".
     *
     * This request holds the parameters needed by the the zeppauserinfoendpoint server.  After
     * setting any optional parameters, call the {@link UpdateZeppaUserInfo#execute()} method to
     * invoke the remote operation. <p> {@link UpdateZeppaUserInfo#initialize(com.google.api.client.go
     * ogleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo}
     * @since 1.13
     */
    protected UpdateZeppaUserInfo(com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo content) {
      super(Zeppauserinfoendpoint.this, "PUT", REST_PATH, content, com.minook.zeppa.zeppauserinfoendpoint.model.ZeppaUserInfo.class);
    }

    @Override
    public UpdateZeppaUserInfo setAlt(java.lang.String alt) {
      return (UpdateZeppaUserInfo) super.setAlt(alt);
    }

    @Override
    public UpdateZeppaUserInfo setFields(java.lang.String fields) {
      return (UpdateZeppaUserInfo) super.setFields(fields);
    }

    @Override
    public UpdateZeppaUserInfo setKey(java.lang.String key) {
      return (UpdateZeppaUserInfo) super.setKey(key);
    }

    @Override
    public UpdateZeppaUserInfo setOauthToken(java.lang.String oauthToken) {
      return (UpdateZeppaUserInfo) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateZeppaUserInfo setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateZeppaUserInfo) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateZeppaUserInfo setQuotaUser(java.lang.String quotaUser) {
      return (UpdateZeppaUserInfo) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateZeppaUserInfo setUserIp(java.lang.String userIp) {
      return (UpdateZeppaUserInfo) super.setUserIp(userIp);
    }

    @Override
    public UpdateZeppaUserInfo set(String parameterName, Object value) {
      return (UpdateZeppaUserInfo) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Zeppauserinfoendpoint}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Zeppauserinfoendpoint}. */
    @Override
    public Zeppauserinfoendpoint build() {
      return new Zeppauserinfoendpoint(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ZeppauserinfoendpointRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setZeppauserinfoendpointRequestInitializer(
        ZeppauserinfoendpointRequestInitializer zeppauserinfoendpointRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(zeppauserinfoendpointRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
