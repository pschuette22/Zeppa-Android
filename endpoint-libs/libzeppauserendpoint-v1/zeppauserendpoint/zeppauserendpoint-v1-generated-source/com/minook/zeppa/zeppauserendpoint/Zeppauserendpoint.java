/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-04-15 19:10:39 UTC)
 * on 2014-05-14 at 06:16:36 UTC 
 * Modify at your own risk.
 */

package com.minook.zeppa.zeppauserendpoint;

/**
 * Service definition for Zeppauserendpoint (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ZeppauserendpointRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Zeppauserendpoint extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.16.0-rc of the zeppauserendpoint library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://zeppa-cloud-1821.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "zeppauserendpoint/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Zeppauserendpoint(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Zeppauserendpoint(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "addNewTagFollower".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link AddNewTagFollower#execute()} method to invoke the remote
   * operation.
   *
   * @param callingUserId
   * @param requestedUserId
   * @return the request
   */
  public AddNewTagFollower addNewTagFollower(java.lang.Long callingUserId, java.lang.Long requestedUserId) throws java.io.IOException {
    AddNewTagFollower result = new AddNewTagFollower(callingUserId, requestedUserId);
    initialize(result);
    return result;
  }

  public class AddNewTagFollower extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.ZeppaUser> {

    private static final String REST_PATH = "addNewTagFollower/{callingUserId}/{requestedUserId}";

    /**
     * Create a request for the method "addNewTagFollower".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link AddNewTagFollower#execute()} method to invoke the
     * remote operation. <p> {@link AddNewTagFollower#initialize(com.google.api.client.googleapis.serv
     * ices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param callingUserId
     * @param requestedUserId
     * @since 1.13
     */
    protected AddNewTagFollower(java.lang.Long callingUserId, java.lang.Long requestedUserId) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, null, com.minook.zeppa.zeppauserendpoint.model.ZeppaUser.class);
      this.callingUserId = com.google.api.client.util.Preconditions.checkNotNull(callingUserId, "Required parameter callingUserId must be specified.");
      this.requestedUserId = com.google.api.client.util.Preconditions.checkNotNull(requestedUserId, "Required parameter requestedUserId must be specified.");
    }

    @Override
    public AddNewTagFollower setAlt(java.lang.String alt) {
      return (AddNewTagFollower) super.setAlt(alt);
    }

    @Override
    public AddNewTagFollower setFields(java.lang.String fields) {
      return (AddNewTagFollower) super.setFields(fields);
    }

    @Override
    public AddNewTagFollower setKey(java.lang.String key) {
      return (AddNewTagFollower) super.setKey(key);
    }

    @Override
    public AddNewTagFollower setOauthToken(java.lang.String oauthToken) {
      return (AddNewTagFollower) super.setOauthToken(oauthToken);
    }

    @Override
    public AddNewTagFollower setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AddNewTagFollower) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddNewTagFollower setQuotaUser(java.lang.String quotaUser) {
      return (AddNewTagFollower) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddNewTagFollower setUserIp(java.lang.String userIp) {
      return (AddNewTagFollower) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long callingUserId;

    /**

     */
    public java.lang.Long getCallingUserId() {
      return callingUserId;
    }

    public AddNewTagFollower setCallingUserId(java.lang.Long callingUserId) {
      this.callingUserId = callingUserId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long requestedUserId;

    /**

     */
    public java.lang.Long getRequestedUserId() {
      return requestedUserId;
    }

    public AddNewTagFollower setRequestedUserId(java.lang.Long requestedUserId) {
      this.requestedUserId = requestedUserId;
      return this;
    }

    @Override
    public AddNewTagFollower set(String parameterName, Object value) {
      return (AddNewTagFollower) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "fetchFriendByEmail".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link FetchFriendByEmail#execute()} method to invoke the remote
   * operation.
   *
   * @param emailString
   * @return the request
   */
  public FetchFriendByEmail fetchFriendByEmail(java.lang.String emailString) throws java.io.IOException {
    FetchFriendByEmail result = new FetchFriendByEmail(emailString);
    initialize(result);
    return result;
  }

  public class FetchFriendByEmail extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.ZeppaUser> {

    private static final String REST_PATH = "fetchFriendByEmail/{emailString}";

    /**
     * Create a request for the method "fetchFriendByEmail".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link FetchFriendByEmail#execute()} method to invoke the
     * remote operation. <p> {@link FetchFriendByEmail#initialize(com.google.api.client.googleapis.ser
     * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param emailString
     * @since 1.13
     */
    protected FetchFriendByEmail(java.lang.String emailString) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, null, com.minook.zeppa.zeppauserendpoint.model.ZeppaUser.class);
      this.emailString = com.google.api.client.util.Preconditions.checkNotNull(emailString, "Required parameter emailString must be specified.");
    }

    @Override
    public FetchFriendByEmail setAlt(java.lang.String alt) {
      return (FetchFriendByEmail) super.setAlt(alt);
    }

    @Override
    public FetchFriendByEmail setFields(java.lang.String fields) {
      return (FetchFriendByEmail) super.setFields(fields);
    }

    @Override
    public FetchFriendByEmail setKey(java.lang.String key) {
      return (FetchFriendByEmail) super.setKey(key);
    }

    @Override
    public FetchFriendByEmail setOauthToken(java.lang.String oauthToken) {
      return (FetchFriendByEmail) super.setOauthToken(oauthToken);
    }

    @Override
    public FetchFriendByEmail setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FetchFriendByEmail) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FetchFriendByEmail setQuotaUser(java.lang.String quotaUser) {
      return (FetchFriendByEmail) super.setQuotaUser(quotaUser);
    }

    @Override
    public FetchFriendByEmail setUserIp(java.lang.String userIp) {
      return (FetchFriendByEmail) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String emailString;

    /**

     */
    public java.lang.String getEmailString() {
      return emailString;
    }

    public FetchFriendByEmail setEmailString(java.lang.String emailString) {
      this.emailString = emailString;
      return this;
    }

    @Override
    public FetchFriendByEmail set(String parameterName, Object value) {
      return (FetchFriendByEmail) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "fetchFriendList".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link FetchFriendList#execute()} method to invoke the remote
   * operation.
   *
   * @param userId
   * @param start
   * @return the request
   */
  public FetchFriendList fetchFriendList(java.lang.Long userId, java.lang.Integer start) throws java.io.IOException {
    FetchFriendList result = new FetchFriendList(userId, start);
    initialize(result);
    return result;
  }

  public class FetchFriendList extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.CollectionResponseZeppaUser> {

    private static final String REST_PATH = "fetchFriendList/{userId}/{start}";

    /**
     * Create a request for the method "fetchFriendList".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link FetchFriendList#execute()} method to invoke the remote
     * operation. <p> {@link FetchFriendList#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param userId
     * @param start
     * @since 1.13
     */
    protected FetchFriendList(java.lang.Long userId, java.lang.Integer start) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, null, com.minook.zeppa.zeppauserendpoint.model.CollectionResponseZeppaUser.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.start = com.google.api.client.util.Preconditions.checkNotNull(start, "Required parameter start must be specified.");
    }

    @Override
    public FetchFriendList setAlt(java.lang.String alt) {
      return (FetchFriendList) super.setAlt(alt);
    }

    @Override
    public FetchFriendList setFields(java.lang.String fields) {
      return (FetchFriendList) super.setFields(fields);
    }

    @Override
    public FetchFriendList setKey(java.lang.String key) {
      return (FetchFriendList) super.setKey(key);
    }

    @Override
    public FetchFriendList setOauthToken(java.lang.String oauthToken) {
      return (FetchFriendList) super.setOauthToken(oauthToken);
    }

    @Override
    public FetchFriendList setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FetchFriendList) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FetchFriendList setQuotaUser(java.lang.String quotaUser) {
      return (FetchFriendList) super.setQuotaUser(quotaUser);
    }

    @Override
    public FetchFriendList setUserIp(java.lang.String userIp) {
      return (FetchFriendList) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public FetchFriendList setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer start;

    /**

     */
    public java.lang.Integer getStart() {
      return start;
    }

    public FetchFriendList setStart(java.lang.Integer start) {
      this.start = start;
      return this;
    }

    @Override
    public FetchFriendList set(String parameterName, Object value) {
      return (FetchFriendList) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "fetchMatchingUser".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link FetchMatchingUser#execute()} method to invoke the remote
   * operation.
   *
   * @param profileId
   * @return the request
   */
  public FetchMatchingUser fetchMatchingUser(java.lang.String profileId) throws java.io.IOException {
    FetchMatchingUser result = new FetchMatchingUser(profileId);
    initialize(result);
    return result;
  }

  public class FetchMatchingUser extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.ZeppaUser> {

    private static final String REST_PATH = "fetchMatchingUser/{profileId}";

    /**
     * Create a request for the method "fetchMatchingUser".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link FetchMatchingUser#execute()} method to invoke the
     * remote operation. <p> {@link FetchMatchingUser#initialize(com.google.api.client.googleapis.serv
     * ices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param profileId
     * @since 1.13
     */
    protected FetchMatchingUser(java.lang.String profileId) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, null, com.minook.zeppa.zeppauserendpoint.model.ZeppaUser.class);
      this.profileId = com.google.api.client.util.Preconditions.checkNotNull(profileId, "Required parameter profileId must be specified.");
    }

    @Override
    public FetchMatchingUser setAlt(java.lang.String alt) {
      return (FetchMatchingUser) super.setAlt(alt);
    }

    @Override
    public FetchMatchingUser setFields(java.lang.String fields) {
      return (FetchMatchingUser) super.setFields(fields);
    }

    @Override
    public FetchMatchingUser setKey(java.lang.String key) {
      return (FetchMatchingUser) super.setKey(key);
    }

    @Override
    public FetchMatchingUser setOauthToken(java.lang.String oauthToken) {
      return (FetchMatchingUser) super.setOauthToken(oauthToken);
    }

    @Override
    public FetchMatchingUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FetchMatchingUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FetchMatchingUser setQuotaUser(java.lang.String quotaUser) {
      return (FetchMatchingUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public FetchMatchingUser setUserIp(java.lang.String userIp) {
      return (FetchMatchingUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String profileId;

    /**

     */
    public java.lang.String getProfileId() {
      return profileId;
    }

    public FetchMatchingUser setProfileId(java.lang.String profileId) {
      this.profileId = profileId;
      return this;
    }

    @Override
    public FetchMatchingUser set(String parameterName, Object value) {
      return (FetchMatchingUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "findFriendsByEmailList".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link FindFriendsByEmailList#execute()} method to invoke the
   * remote operation.
   *
   * @param encodedStringList
   * @return the request
   */
  public FindFriendsByEmailList findFriendsByEmailList(java.lang.String encodedStringList) throws java.io.IOException {
    FindFriendsByEmailList result = new FindFriendsByEmailList(encodedStringList);
    initialize(result);
    return result;
  }

  public class FindFriendsByEmailList extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.CollectionResponseZeppaUser> {

    private static final String REST_PATH = "findFriendsByEmailList/{encodedStringList}";

    /**
     * Create a request for the method "findFriendsByEmailList".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link FindFriendsByEmailList#execute()} method to invoke the
     * remote operation. <p> {@link FindFriendsByEmailList#initialize(com.google.api.client.googleapis
     * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param encodedStringList
     * @since 1.13
     */
    protected FindFriendsByEmailList(java.lang.String encodedStringList) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, null, com.minook.zeppa.zeppauserendpoint.model.CollectionResponseZeppaUser.class);
      this.encodedStringList = com.google.api.client.util.Preconditions.checkNotNull(encodedStringList, "Required parameter encodedStringList must be specified.");
    }

    @Override
    public FindFriendsByEmailList setAlt(java.lang.String alt) {
      return (FindFriendsByEmailList) super.setAlt(alt);
    }

    @Override
    public FindFriendsByEmailList setFields(java.lang.String fields) {
      return (FindFriendsByEmailList) super.setFields(fields);
    }

    @Override
    public FindFriendsByEmailList setKey(java.lang.String key) {
      return (FindFriendsByEmailList) super.setKey(key);
    }

    @Override
    public FindFriendsByEmailList setOauthToken(java.lang.String oauthToken) {
      return (FindFriendsByEmailList) super.setOauthToken(oauthToken);
    }

    @Override
    public FindFriendsByEmailList setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FindFriendsByEmailList) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FindFriendsByEmailList setQuotaUser(java.lang.String quotaUser) {
      return (FindFriendsByEmailList) super.setQuotaUser(quotaUser);
    }

    @Override
    public FindFriendsByEmailList setUserIp(java.lang.String userIp) {
      return (FindFriendsByEmailList) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String encodedStringList;

    /**

     */
    public java.lang.String getEncodedStringList() {
      return encodedStringList;
    }

    public FindFriendsByEmailList setEncodedStringList(java.lang.String encodedStringList) {
      this.encodedStringList = encodedStringList;
      return this;
    }

    @Override
    public FindFriendsByEmailList set(String parameterName, Object value) {
      return (FindFriendsByEmailList) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "findFriendsByPhoneList".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link FindFriendsByPhoneList#execute()} method to invoke the
   * remote operation.
   *
   * @param encodedPhoneList
   * @return the request
   */
  public FindFriendsByPhoneList findFriendsByPhoneList(java.lang.String encodedPhoneList) throws java.io.IOException {
    FindFriendsByPhoneList result = new FindFriendsByPhoneList(encodedPhoneList);
    initialize(result);
    return result;
  }

  public class FindFriendsByPhoneList extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.CollectionResponseZeppaUser> {

    private static final String REST_PATH = "findFriendsByPhoneList/{encodedPhoneList}";

    /**
     * Create a request for the method "findFriendsByPhoneList".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link FindFriendsByPhoneList#execute()} method to invoke the
     * remote operation. <p> {@link FindFriendsByPhoneList#initialize(com.google.api.client.googleapis
     * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param encodedPhoneList
     * @since 1.13
     */
    protected FindFriendsByPhoneList(java.lang.String encodedPhoneList) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, null, com.minook.zeppa.zeppauserendpoint.model.CollectionResponseZeppaUser.class);
      this.encodedPhoneList = com.google.api.client.util.Preconditions.checkNotNull(encodedPhoneList, "Required parameter encodedPhoneList must be specified.");
    }

    @Override
    public FindFriendsByPhoneList setAlt(java.lang.String alt) {
      return (FindFriendsByPhoneList) super.setAlt(alt);
    }

    @Override
    public FindFriendsByPhoneList setFields(java.lang.String fields) {
      return (FindFriendsByPhoneList) super.setFields(fields);
    }

    @Override
    public FindFriendsByPhoneList setKey(java.lang.String key) {
      return (FindFriendsByPhoneList) super.setKey(key);
    }

    @Override
    public FindFriendsByPhoneList setOauthToken(java.lang.String oauthToken) {
      return (FindFriendsByPhoneList) super.setOauthToken(oauthToken);
    }

    @Override
    public FindFriendsByPhoneList setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FindFriendsByPhoneList) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FindFriendsByPhoneList setQuotaUser(java.lang.String quotaUser) {
      return (FindFriendsByPhoneList) super.setQuotaUser(quotaUser);
    }

    @Override
    public FindFriendsByPhoneList setUserIp(java.lang.String userIp) {
      return (FindFriendsByPhoneList) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String encodedPhoneList;

    /**

     */
    public java.lang.String getEncodedPhoneList() {
      return encodedPhoneList;
    }

    public FindFriendsByPhoneList setEncodedPhoneList(java.lang.String encodedPhoneList) {
      this.encodedPhoneList = encodedPhoneList;
      return this;
    }

    @Override
    public FindFriendsByPhoneList set(String parameterName, Object value) {
      return (FindFriendsByPhoneList) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getPendingRequestUsers".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link GetPendingRequestUsers#execute()} method to invoke the
   * remote operation.
   *
   * @param userId
   * @param start
   * @return the request
   */
  public GetPendingRequestUsers getPendingRequestUsers(java.lang.Long userId, java.lang.Integer start) throws java.io.IOException {
    GetPendingRequestUsers result = new GetPendingRequestUsers(userId, start);
    initialize(result);
    return result;
  }

  public class GetPendingRequestUsers extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.CollectionResponseZeppaUser> {

    private static final String REST_PATH = "collectionresponse_zeppauser/{userId}/{start}";

    /**
     * Create a request for the method "getPendingRequestUsers".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link GetPendingRequestUsers#execute()} method to invoke the
     * remote operation. <p> {@link GetPendingRequestUsers#initialize(com.google.api.client.googleapis
     * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param userId
     * @param start
     * @since 1.13
     */
    protected GetPendingRequestUsers(java.lang.Long userId, java.lang.Integer start) {
      super(Zeppauserendpoint.this, "GET", REST_PATH, null, com.minook.zeppa.zeppauserendpoint.model.CollectionResponseZeppaUser.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.start = com.google.api.client.util.Preconditions.checkNotNull(start, "Required parameter start must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetPendingRequestUsers setAlt(java.lang.String alt) {
      return (GetPendingRequestUsers) super.setAlt(alt);
    }

    @Override
    public GetPendingRequestUsers setFields(java.lang.String fields) {
      return (GetPendingRequestUsers) super.setFields(fields);
    }

    @Override
    public GetPendingRequestUsers setKey(java.lang.String key) {
      return (GetPendingRequestUsers) super.setKey(key);
    }

    @Override
    public GetPendingRequestUsers setOauthToken(java.lang.String oauthToken) {
      return (GetPendingRequestUsers) super.setOauthToken(oauthToken);
    }

    @Override
    public GetPendingRequestUsers setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetPendingRequestUsers) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetPendingRequestUsers setQuotaUser(java.lang.String quotaUser) {
      return (GetPendingRequestUsers) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetPendingRequestUsers setUserIp(java.lang.String userIp) {
      return (GetPendingRequestUsers) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetPendingRequestUsers setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer start;

    /**

     */
    public java.lang.Integer getStart() {
      return start;
    }

    public GetPendingRequestUsers setStart(java.lang.Integer start) {
      this.start = start;
      return this;
    }

    @Override
    public GetPendingRequestUsers set(String parameterName, Object value) {
      return (GetPendingRequestUsers) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getZeppaUser".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link GetZeppaUser#execute()} method to invoke the remote
   * operation.
   *
   * @param userId
   * @return the request
   */
  public GetZeppaUser getZeppaUser(java.lang.Long userId) throws java.io.IOException {
    GetZeppaUser result = new GetZeppaUser(userId);
    initialize(result);
    return result;
  }

  public class GetZeppaUser extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.ZeppaUser> {

    private static final String REST_PATH = "zeppauser/{userId}";

    /**
     * Create a request for the method "getZeppaUser".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link GetZeppaUser#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetZeppaUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userId
     * @since 1.13
     */
    protected GetZeppaUser(java.lang.Long userId) {
      super(Zeppauserendpoint.this, "GET", REST_PATH, null, com.minook.zeppa.zeppauserendpoint.model.ZeppaUser.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetZeppaUser setAlt(java.lang.String alt) {
      return (GetZeppaUser) super.setAlt(alt);
    }

    @Override
    public GetZeppaUser setFields(java.lang.String fields) {
      return (GetZeppaUser) super.setFields(fields);
    }

    @Override
    public GetZeppaUser setKey(java.lang.String key) {
      return (GetZeppaUser) super.setKey(key);
    }

    @Override
    public GetZeppaUser setOauthToken(java.lang.String oauthToken) {
      return (GetZeppaUser) super.setOauthToken(oauthToken);
    }

    @Override
    public GetZeppaUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetZeppaUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetZeppaUser setQuotaUser(java.lang.String quotaUser) {
      return (GetZeppaUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetZeppaUser setUserIp(java.lang.String userIp) {
      return (GetZeppaUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetZeppaUser setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public GetZeppaUser set(String parameterName, Object value) {
      return (GetZeppaUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertZeppaUser".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link InsertZeppaUser#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.minook.zeppa.zeppauserendpoint.model.ZeppaUser}
   * @return the request
   */
  public InsertZeppaUser insertZeppaUser(com.minook.zeppa.zeppauserendpoint.model.ZeppaUser content) throws java.io.IOException {
    InsertZeppaUser result = new InsertZeppaUser(content);
    initialize(result);
    return result;
  }

  public class InsertZeppaUser extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.ZeppaUser> {

    private static final String REST_PATH = "zeppauser";

    /**
     * Create a request for the method "insertZeppaUser".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link InsertZeppaUser#execute()} method to invoke the remote
     * operation. <p> {@link InsertZeppaUser#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.minook.zeppa.zeppauserendpoint.model.ZeppaUser}
     * @since 1.13
     */
    protected InsertZeppaUser(com.minook.zeppa.zeppauserendpoint.model.ZeppaUser content) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, content, com.minook.zeppa.zeppauserendpoint.model.ZeppaUser.class);
    }

    @Override
    public InsertZeppaUser setAlt(java.lang.String alt) {
      return (InsertZeppaUser) super.setAlt(alt);
    }

    @Override
    public InsertZeppaUser setFields(java.lang.String fields) {
      return (InsertZeppaUser) super.setFields(fields);
    }

    @Override
    public InsertZeppaUser setKey(java.lang.String key) {
      return (InsertZeppaUser) super.setKey(key);
    }

    @Override
    public InsertZeppaUser setOauthToken(java.lang.String oauthToken) {
      return (InsertZeppaUser) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertZeppaUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertZeppaUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertZeppaUser setQuotaUser(java.lang.String quotaUser) {
      return (InsertZeppaUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertZeppaUser setUserIp(java.lang.String userIp) {
      return (InsertZeppaUser) super.setUserIp(userIp);
    }

    @Override
    public InsertZeppaUser set(String parameterName, Object value) {
      return (InsertZeppaUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listZeppaUser".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link ListZeppaUser#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public ListZeppaUser listZeppaUser() throws java.io.IOException {
    ListZeppaUser result = new ListZeppaUser();
    initialize(result);
    return result;
  }

  public class ListZeppaUser extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.CollectionResponseZeppaUser> {

    private static final String REST_PATH = "zeppauser";

    /**
     * Create a request for the method "listZeppaUser".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link ListZeppaUser#execute()} method to invoke the remote
     * operation. <p> {@link ListZeppaUser#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @since 1.13
     */
    protected ListZeppaUser() {
      super(Zeppauserendpoint.this, "GET", REST_PATH, null, com.minook.zeppa.zeppauserendpoint.model.CollectionResponseZeppaUser.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListZeppaUser setAlt(java.lang.String alt) {
      return (ListZeppaUser) super.setAlt(alt);
    }

    @Override
    public ListZeppaUser setFields(java.lang.String fields) {
      return (ListZeppaUser) super.setFields(fields);
    }

    @Override
    public ListZeppaUser setKey(java.lang.String key) {
      return (ListZeppaUser) super.setKey(key);
    }

    @Override
    public ListZeppaUser setOauthToken(java.lang.String oauthToken) {
      return (ListZeppaUser) super.setOauthToken(oauthToken);
    }

    @Override
    public ListZeppaUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListZeppaUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListZeppaUser setQuotaUser(java.lang.String quotaUser) {
      return (ListZeppaUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListZeppaUser setUserIp(java.lang.String userIp) {
      return (ListZeppaUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListZeppaUser setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListZeppaUser setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListZeppaUser set(String parameterName, Object value) {
      return (ListZeppaUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "registerUserDevice".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link RegisterUserDevice#execute()} method to invoke the remote
   * operation.
   *
   * @param callingUserId
   * @param deviceId
   * @return the request
   */
  public RegisterUserDevice registerUserDevice(java.lang.Long callingUserId, java.lang.String deviceId) throws java.io.IOException {
    RegisterUserDevice result = new RegisterUserDevice(callingUserId, deviceId);
    initialize(result);
    return result;
  }

  public class RegisterUserDevice extends ZeppauserendpointRequest<Void> {

    private static final String REST_PATH = "registerUserDevice/{callingUserId}/{DeviceId}";

    /**
     * Create a request for the method "registerUserDevice".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link RegisterUserDevice#execute()} method to invoke the
     * remote operation. <p> {@link RegisterUserDevice#initialize(com.google.api.client.googleapis.ser
     * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param callingUserId
     * @param deviceId
     * @since 1.13
     */
    protected RegisterUserDevice(java.lang.Long callingUserId, java.lang.String deviceId) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, null, Void.class);
      this.callingUserId = com.google.api.client.util.Preconditions.checkNotNull(callingUserId, "Required parameter callingUserId must be specified.");
      this.deviceId = com.google.api.client.util.Preconditions.checkNotNull(deviceId, "Required parameter deviceId must be specified.");
    }

    @Override
    public RegisterUserDevice setAlt(java.lang.String alt) {
      return (RegisterUserDevice) super.setAlt(alt);
    }

    @Override
    public RegisterUserDevice setFields(java.lang.String fields) {
      return (RegisterUserDevice) super.setFields(fields);
    }

    @Override
    public RegisterUserDevice setKey(java.lang.String key) {
      return (RegisterUserDevice) super.setKey(key);
    }

    @Override
    public RegisterUserDevice setOauthToken(java.lang.String oauthToken) {
      return (RegisterUserDevice) super.setOauthToken(oauthToken);
    }

    @Override
    public RegisterUserDevice setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RegisterUserDevice) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RegisterUserDevice setQuotaUser(java.lang.String quotaUser) {
      return (RegisterUserDevice) super.setQuotaUser(quotaUser);
    }

    @Override
    public RegisterUserDevice setUserIp(java.lang.String userIp) {
      return (RegisterUserDevice) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long callingUserId;

    /**

     */
    public java.lang.Long getCallingUserId() {
      return callingUserId;
    }

    public RegisterUserDevice setCallingUserId(java.lang.Long callingUserId) {
      this.callingUserId = callingUserId;
      return this;
    }

    @com.google.api.client.util.Key("DeviceId")
    private java.lang.String deviceId;

    /**

     */
    public java.lang.String getDeviceId() {
      return deviceId;
    }

    public RegisterUserDevice setDeviceId(java.lang.String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    @Override
    public RegisterUserDevice set(String parameterName, Object value) {
      return (RegisterUserDevice) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeFromContacts".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link RemoveFromContacts#execute()} method to invoke the remote
   * operation.
   *
   * @param callingUserId
   * @param requestedUserId
   * @return the request
   */
  public RemoveFromContacts removeFromContacts(java.lang.Long callingUserId, java.lang.Long requestedUserId) throws java.io.IOException {
    RemoveFromContacts result = new RemoveFromContacts(callingUserId, requestedUserId);
    initialize(result);
    return result;
  }

  public class RemoveFromContacts extends ZeppauserendpointRequest<Void> {

    private static final String REST_PATH = "fromcontacts/{callingUserId}/{requestedUserId}";

    /**
     * Create a request for the method "removeFromContacts".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link RemoveFromContacts#execute()} method to invoke the
     * remote operation. <p> {@link RemoveFromContacts#initialize(com.google.api.client.googleapis.ser
     * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param callingUserId
     * @param requestedUserId
     * @since 1.13
     */
    protected RemoveFromContacts(java.lang.Long callingUserId, java.lang.Long requestedUserId) {
      super(Zeppauserendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.callingUserId = com.google.api.client.util.Preconditions.checkNotNull(callingUserId, "Required parameter callingUserId must be specified.");
      this.requestedUserId = com.google.api.client.util.Preconditions.checkNotNull(requestedUserId, "Required parameter requestedUserId must be specified.");
    }

    @Override
    public RemoveFromContacts setAlt(java.lang.String alt) {
      return (RemoveFromContacts) super.setAlt(alt);
    }

    @Override
    public RemoveFromContacts setFields(java.lang.String fields) {
      return (RemoveFromContacts) super.setFields(fields);
    }

    @Override
    public RemoveFromContacts setKey(java.lang.String key) {
      return (RemoveFromContacts) super.setKey(key);
    }

    @Override
    public RemoveFromContacts setOauthToken(java.lang.String oauthToken) {
      return (RemoveFromContacts) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveFromContacts setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveFromContacts) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveFromContacts setQuotaUser(java.lang.String quotaUser) {
      return (RemoveFromContacts) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveFromContacts setUserIp(java.lang.String userIp) {
      return (RemoveFromContacts) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long callingUserId;

    /**

     */
    public java.lang.Long getCallingUserId() {
      return callingUserId;
    }

    public RemoveFromContacts setCallingUserId(java.lang.Long callingUserId) {
      this.callingUserId = callingUserId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long requestedUserId;

    /**

     */
    public java.lang.Long getRequestedUserId() {
      return requestedUserId;
    }

    public RemoveFromContacts setRequestedUserId(java.lang.Long requestedUserId) {
      this.requestedUserId = requestedUserId;
      return this;
    }

    @Override
    public RemoveFromContacts set(String parameterName, Object value) {
      return (RemoveFromContacts) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeNewtagFollower".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link RemoveNewtagFollower#execute()} method to invoke the remote
   * operation.
   *
   * @param callingUserId
   * @param requestedUserId
   * @return the request
   */
  public RemoveNewtagFollower removeNewtagFollower(java.lang.Long callingUserId, java.lang.Long requestedUserId) throws java.io.IOException {
    RemoveNewtagFollower result = new RemoveNewtagFollower(callingUserId, requestedUserId);
    initialize(result);
    return result;
  }

  public class RemoveNewtagFollower extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.ZeppaUser> {

    private static final String REST_PATH = "newtagfollower/{callingUserId}/{requestedUserId}";

    /**
     * Create a request for the method "removeNewtagFollower".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link RemoveNewtagFollower#execute()} method to invoke the
     * remote operation. <p> {@link RemoveNewtagFollower#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param callingUserId
     * @param requestedUserId
     * @since 1.13
     */
    protected RemoveNewtagFollower(java.lang.Long callingUserId, java.lang.Long requestedUserId) {
      super(Zeppauserendpoint.this, "DELETE", REST_PATH, null, com.minook.zeppa.zeppauserendpoint.model.ZeppaUser.class);
      this.callingUserId = com.google.api.client.util.Preconditions.checkNotNull(callingUserId, "Required parameter callingUserId must be specified.");
      this.requestedUserId = com.google.api.client.util.Preconditions.checkNotNull(requestedUserId, "Required parameter requestedUserId must be specified.");
    }

    @Override
    public RemoveNewtagFollower setAlt(java.lang.String alt) {
      return (RemoveNewtagFollower) super.setAlt(alt);
    }

    @Override
    public RemoveNewtagFollower setFields(java.lang.String fields) {
      return (RemoveNewtagFollower) super.setFields(fields);
    }

    @Override
    public RemoveNewtagFollower setKey(java.lang.String key) {
      return (RemoveNewtagFollower) super.setKey(key);
    }

    @Override
    public RemoveNewtagFollower setOauthToken(java.lang.String oauthToken) {
      return (RemoveNewtagFollower) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveNewtagFollower setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveNewtagFollower) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveNewtagFollower setQuotaUser(java.lang.String quotaUser) {
      return (RemoveNewtagFollower) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveNewtagFollower setUserIp(java.lang.String userIp) {
      return (RemoveNewtagFollower) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long callingUserId;

    /**

     */
    public java.lang.Long getCallingUserId() {
      return callingUserId;
    }

    public RemoveNewtagFollower setCallingUserId(java.lang.Long callingUserId) {
      this.callingUserId = callingUserId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long requestedUserId;

    /**

     */
    public java.lang.Long getRequestedUserId() {
      return requestedUserId;
    }

    public RemoveNewtagFollower setRequestedUserId(java.lang.Long requestedUserId) {
      this.requestedUserId = requestedUserId;
      return this;
    }

    @Override
    public RemoveNewtagFollower set(String parameterName, Object value) {
      return (RemoveNewtagFollower) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeZeppaUser".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link RemoveZeppaUser#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemoveZeppaUser removeZeppaUser(java.lang.Long id) throws java.io.IOException {
    RemoveZeppaUser result = new RemoveZeppaUser(id);
    initialize(result);
    return result;
  }

  public class RemoveZeppaUser extends ZeppauserendpointRequest<Void> {

    private static final String REST_PATH = "zeppauser/{id}";

    /**
     * Create a request for the method "removeZeppaUser".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link RemoveZeppaUser#execute()} method to invoke the remote
     * operation. <p> {@link RemoveZeppaUser#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveZeppaUser(java.lang.Long id) {
      super(Zeppauserendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveZeppaUser setAlt(java.lang.String alt) {
      return (RemoveZeppaUser) super.setAlt(alt);
    }

    @Override
    public RemoveZeppaUser setFields(java.lang.String fields) {
      return (RemoveZeppaUser) super.setFields(fields);
    }

    @Override
    public RemoveZeppaUser setKey(java.lang.String key) {
      return (RemoveZeppaUser) super.setKey(key);
    }

    @Override
    public RemoveZeppaUser setOauthToken(java.lang.String oauthToken) {
      return (RemoveZeppaUser) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveZeppaUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveZeppaUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveZeppaUser setQuotaUser(java.lang.String quotaUser) {
      return (RemoveZeppaUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveZeppaUser setUserIp(java.lang.String userIp) {
      return (RemoveZeppaUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveZeppaUser setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveZeppaUser set(String parameterName, Object value) {
      return (RemoveZeppaUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "requestContactConnection".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link RequestContactConnection#execute()} method to invoke the
   * remote operation.
   *
   * @param callingUserId
   * @param requestedUserId
   * @return the request
   */
  public RequestContactConnection requestContactConnection(java.lang.Long callingUserId, java.lang.Long requestedUserId) throws java.io.IOException {
    RequestContactConnection result = new RequestContactConnection(callingUserId, requestedUserId);
    initialize(result);
    return result;
  }

  public class RequestContactConnection extends ZeppauserendpointRequest<Void> {

    private static final String REST_PATH = "requestContactConnection/{callingUserId}/{requestedUserId}";

    /**
     * Create a request for the method "requestContactConnection".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link RequestContactConnection#execute()} method to invoke
     * the remote operation. <p> {@link RequestContactConnection#initialize(com.google.api.client.goog
     * leapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param callingUserId
     * @param requestedUserId
     * @since 1.13
     */
    protected RequestContactConnection(java.lang.Long callingUserId, java.lang.Long requestedUserId) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, null, Void.class);
      this.callingUserId = com.google.api.client.util.Preconditions.checkNotNull(callingUserId, "Required parameter callingUserId must be specified.");
      this.requestedUserId = com.google.api.client.util.Preconditions.checkNotNull(requestedUserId, "Required parameter requestedUserId must be specified.");
    }

    @Override
    public RequestContactConnection setAlt(java.lang.String alt) {
      return (RequestContactConnection) super.setAlt(alt);
    }

    @Override
    public RequestContactConnection setFields(java.lang.String fields) {
      return (RequestContactConnection) super.setFields(fields);
    }

    @Override
    public RequestContactConnection setKey(java.lang.String key) {
      return (RequestContactConnection) super.setKey(key);
    }

    @Override
    public RequestContactConnection setOauthToken(java.lang.String oauthToken) {
      return (RequestContactConnection) super.setOauthToken(oauthToken);
    }

    @Override
    public RequestContactConnection setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RequestContactConnection) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RequestContactConnection setQuotaUser(java.lang.String quotaUser) {
      return (RequestContactConnection) super.setQuotaUser(quotaUser);
    }

    @Override
    public RequestContactConnection setUserIp(java.lang.String userIp) {
      return (RequestContactConnection) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long callingUserId;

    /**

     */
    public java.lang.Long getCallingUserId() {
      return callingUserId;
    }

    public RequestContactConnection setCallingUserId(java.lang.Long callingUserId) {
      this.callingUserId = callingUserId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long requestedUserId;

    /**

     */
    public java.lang.Long getRequestedUserId() {
      return requestedUserId;
    }

    public RequestContactConnection setRequestedUserId(java.lang.Long requestedUserId) {
      this.requestedUserId = requestedUserId;
      return this;
    }

    @Override
    public RequestContactConnection set(String parameterName, Object value) {
      return (RequestContactConnection) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "respondToContactRequest".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link RespondToContactRequest#execute()} method to invoke the
   * remote operation.
   *
   * @param callingUserId
   * @param requestedUserId
   * @param response
   * @return the request
   */
  public RespondToContactRequest respondToContactRequest(java.lang.Long callingUserId, java.lang.Long requestedUserId, java.lang.Boolean response) throws java.io.IOException {
    RespondToContactRequest result = new RespondToContactRequest(callingUserId, requestedUserId, response);
    initialize(result);
    return result;
  }

  public class RespondToContactRequest extends ZeppauserendpointRequest<Void> {

    private static final String REST_PATH = "respondToContactRequest/{callingUserId}/{requestedUserId}/{response}";

    /**
     * Create a request for the method "respondToContactRequest".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link RespondToContactRequest#execute()} method to invoke
     * the remote operation. <p> {@link RespondToContactRequest#initialize(com.google.api.client.googl
     * eapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param callingUserId
     * @param requestedUserId
     * @param response
     * @since 1.13
     */
    protected RespondToContactRequest(java.lang.Long callingUserId, java.lang.Long requestedUserId, java.lang.Boolean response) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, null, Void.class);
      this.callingUserId = com.google.api.client.util.Preconditions.checkNotNull(callingUserId, "Required parameter callingUserId must be specified.");
      this.requestedUserId = com.google.api.client.util.Preconditions.checkNotNull(requestedUserId, "Required parameter requestedUserId must be specified.");
      this.response = com.google.api.client.util.Preconditions.checkNotNull(response, "Required parameter response must be specified.");
    }

    @Override
    public RespondToContactRequest setAlt(java.lang.String alt) {
      return (RespondToContactRequest) super.setAlt(alt);
    }

    @Override
    public RespondToContactRequest setFields(java.lang.String fields) {
      return (RespondToContactRequest) super.setFields(fields);
    }

    @Override
    public RespondToContactRequest setKey(java.lang.String key) {
      return (RespondToContactRequest) super.setKey(key);
    }

    @Override
    public RespondToContactRequest setOauthToken(java.lang.String oauthToken) {
      return (RespondToContactRequest) super.setOauthToken(oauthToken);
    }

    @Override
    public RespondToContactRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RespondToContactRequest) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RespondToContactRequest setQuotaUser(java.lang.String quotaUser) {
      return (RespondToContactRequest) super.setQuotaUser(quotaUser);
    }

    @Override
    public RespondToContactRequest setUserIp(java.lang.String userIp) {
      return (RespondToContactRequest) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long callingUserId;

    /**

     */
    public java.lang.Long getCallingUserId() {
      return callingUserId;
    }

    public RespondToContactRequest setCallingUserId(java.lang.Long callingUserId) {
      this.callingUserId = callingUserId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long requestedUserId;

    /**

     */
    public java.lang.Long getRequestedUserId() {
      return requestedUserId;
    }

    public RespondToContactRequest setRequestedUserId(java.lang.Long requestedUserId) {
      this.requestedUserId = requestedUserId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Boolean response;

    /**

     */
    public java.lang.Boolean getResponse() {
      return response;
    }

    public RespondToContactRequest setResponse(java.lang.Boolean response) {
      this.response = response;
      return this;
    }

    @Override
    public RespondToContactRequest set(String parameterName, Object value) {
      return (RespondToContactRequest) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "revokeContactRequest".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link RevokeContactRequest#execute()} method to invoke the remote
   * operation.
   *
   * @param callingUserId
   * @param requestedUserId
   * @return the request
   */
  public RevokeContactRequest revokeContactRequest(java.lang.Long callingUserId, java.lang.Long requestedUserId) throws java.io.IOException {
    RevokeContactRequest result = new RevokeContactRequest(callingUserId, requestedUserId);
    initialize(result);
    return result;
  }

  public class RevokeContactRequest extends ZeppauserendpointRequest<Void> {

    private static final String REST_PATH = "revokeContactRequest/{callingUserId}/{requestedUserId}";

    /**
     * Create a request for the method "revokeContactRequest".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link RevokeContactRequest#execute()} method to invoke the
     * remote operation. <p> {@link RevokeContactRequest#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param callingUserId
     * @param requestedUserId
     * @since 1.13
     */
    protected RevokeContactRequest(java.lang.Long callingUserId, java.lang.Long requestedUserId) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, null, Void.class);
      this.callingUserId = com.google.api.client.util.Preconditions.checkNotNull(callingUserId, "Required parameter callingUserId must be specified.");
      this.requestedUserId = com.google.api.client.util.Preconditions.checkNotNull(requestedUserId, "Required parameter requestedUserId must be specified.");
    }

    @Override
    public RevokeContactRequest setAlt(java.lang.String alt) {
      return (RevokeContactRequest) super.setAlt(alt);
    }

    @Override
    public RevokeContactRequest setFields(java.lang.String fields) {
      return (RevokeContactRequest) super.setFields(fields);
    }

    @Override
    public RevokeContactRequest setKey(java.lang.String key) {
      return (RevokeContactRequest) super.setKey(key);
    }

    @Override
    public RevokeContactRequest setOauthToken(java.lang.String oauthToken) {
      return (RevokeContactRequest) super.setOauthToken(oauthToken);
    }

    @Override
    public RevokeContactRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RevokeContactRequest) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RevokeContactRequest setQuotaUser(java.lang.String quotaUser) {
      return (RevokeContactRequest) super.setQuotaUser(quotaUser);
    }

    @Override
    public RevokeContactRequest setUserIp(java.lang.String userIp) {
      return (RevokeContactRequest) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long callingUserId;

    /**

     */
    public java.lang.Long getCallingUserId() {
      return callingUserId;
    }

    public RevokeContactRequest setCallingUserId(java.lang.Long callingUserId) {
      this.callingUserId = callingUserId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long requestedUserId;

    /**

     */
    public java.lang.Long getRequestedUserId() {
      return requestedUserId;
    }

    public RevokeContactRequest setRequestedUserId(java.lang.Long requestedUserId) {
      this.requestedUserId = requestedUserId;
      return this;
    }

    @Override
    public RevokeContactRequest set(String parameterName, Object value) {
      return (RevokeContactRequest) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "unregisterUserDevice".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link UnregisterUserDevice#execute()} method to invoke the remote
   * operation.
   *
   * @param callingUser
   * @param registrationId
   * @return the request
   */
  public UnregisterUserDevice unregisterUserDevice(java.lang.Long callingUser, java.lang.String registrationId) throws java.io.IOException {
    UnregisterUserDevice result = new UnregisterUserDevice(callingUser, registrationId);
    initialize(result);
    return result;
  }

  public class UnregisterUserDevice extends ZeppauserendpointRequest<Void> {

    private static final String REST_PATH = "unregisterUserDevice/{callingUser}/{RegistrationId}";

    /**
     * Create a request for the method "unregisterUserDevice".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link UnregisterUserDevice#execute()} method to invoke the
     * remote operation. <p> {@link UnregisterUserDevice#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param callingUser
     * @param registrationId
     * @since 1.13
     */
    protected UnregisterUserDevice(java.lang.Long callingUser, java.lang.String registrationId) {
      super(Zeppauserendpoint.this, "POST", REST_PATH, null, Void.class);
      this.callingUser = com.google.api.client.util.Preconditions.checkNotNull(callingUser, "Required parameter callingUser must be specified.");
      this.registrationId = com.google.api.client.util.Preconditions.checkNotNull(registrationId, "Required parameter registrationId must be specified.");
    }

    @Override
    public UnregisterUserDevice setAlt(java.lang.String alt) {
      return (UnregisterUserDevice) super.setAlt(alt);
    }

    @Override
    public UnregisterUserDevice setFields(java.lang.String fields) {
      return (UnregisterUserDevice) super.setFields(fields);
    }

    @Override
    public UnregisterUserDevice setKey(java.lang.String key) {
      return (UnregisterUserDevice) super.setKey(key);
    }

    @Override
    public UnregisterUserDevice setOauthToken(java.lang.String oauthToken) {
      return (UnregisterUserDevice) super.setOauthToken(oauthToken);
    }

    @Override
    public UnregisterUserDevice setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UnregisterUserDevice) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UnregisterUserDevice setQuotaUser(java.lang.String quotaUser) {
      return (UnregisterUserDevice) super.setQuotaUser(quotaUser);
    }

    @Override
    public UnregisterUserDevice setUserIp(java.lang.String userIp) {
      return (UnregisterUserDevice) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long callingUser;

    /**

     */
    public java.lang.Long getCallingUser() {
      return callingUser;
    }

    public UnregisterUserDevice setCallingUser(java.lang.Long callingUser) {
      this.callingUser = callingUser;
      return this;
    }

    @com.google.api.client.util.Key("RegistrationId")
    private java.lang.String registrationId;

    /**

     */
    public java.lang.String getRegistrationId() {
      return registrationId;
    }

    public UnregisterUserDevice setRegistrationId(java.lang.String registrationId) {
      this.registrationId = registrationId;
      return this;
    }

    @Override
    public UnregisterUserDevice set(String parameterName, Object value) {
      return (UnregisterUserDevice) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateZeppaUser".
   *
   * This request holds the parameters needed by the the zeppauserendpoint server.  After setting any
   * optional parameters, call the {@link UpdateZeppaUser#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.minook.zeppa.zeppauserendpoint.model.ZeppaUser}
   * @return the request
   */
  public UpdateZeppaUser updateZeppaUser(com.minook.zeppa.zeppauserendpoint.model.ZeppaUser content) throws java.io.IOException {
    UpdateZeppaUser result = new UpdateZeppaUser(content);
    initialize(result);
    return result;
  }

  public class UpdateZeppaUser extends ZeppauserendpointRequest<com.minook.zeppa.zeppauserendpoint.model.ZeppaUser> {

    private static final String REST_PATH = "zeppauser";

    /**
     * Create a request for the method "updateZeppaUser".
     *
     * This request holds the parameters needed by the the zeppauserendpoint server.  After setting
     * any optional parameters, call the {@link UpdateZeppaUser#execute()} method to invoke the remote
     * operation. <p> {@link UpdateZeppaUser#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.minook.zeppa.zeppauserendpoint.model.ZeppaUser}
     * @since 1.13
     */
    protected UpdateZeppaUser(com.minook.zeppa.zeppauserendpoint.model.ZeppaUser content) {
      super(Zeppauserendpoint.this, "PUT", REST_PATH, content, com.minook.zeppa.zeppauserendpoint.model.ZeppaUser.class);
    }

    @Override
    public UpdateZeppaUser setAlt(java.lang.String alt) {
      return (UpdateZeppaUser) super.setAlt(alt);
    }

    @Override
    public UpdateZeppaUser setFields(java.lang.String fields) {
      return (UpdateZeppaUser) super.setFields(fields);
    }

    @Override
    public UpdateZeppaUser setKey(java.lang.String key) {
      return (UpdateZeppaUser) super.setKey(key);
    }

    @Override
    public UpdateZeppaUser setOauthToken(java.lang.String oauthToken) {
      return (UpdateZeppaUser) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateZeppaUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateZeppaUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateZeppaUser setQuotaUser(java.lang.String quotaUser) {
      return (UpdateZeppaUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateZeppaUser setUserIp(java.lang.String userIp) {
      return (UpdateZeppaUser) super.setUserIp(userIp);
    }

    @Override
    public UpdateZeppaUser set(String parameterName, Object value) {
      return (UpdateZeppaUser) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Zeppauserendpoint}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Zeppauserendpoint}. */
    @Override
    public Zeppauserendpoint build() {
      return new Zeppauserendpoint(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ZeppauserendpointRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setZeppauserendpointRequestInitializer(
        ZeppauserendpointRequestInitializer zeppauserendpointRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(zeppauserendpointRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
